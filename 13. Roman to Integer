class Solution:
    def romanToInt(self, s: str) -> int:
        accumulated = 0
        translations = {
            "I":1,
            "V":5,
            "X":10,
            "L":50,
            "C":100,
            "D":500,
            "M":1000
        }

        #First we take into account the 4 exceptions
        #I can be placed before V (5) and X (10) to make 4 and 9. 
        #X can be placed before L (50) and C (100) to make 40 and 90. 
        #C can be placed before D (500) and M (1000) to make 400 and 900.
        s = s.replace("IV","IIII")
        s = s.replace("IX","VIIII")
        s = s.replace("XL", "XXXX")
        s = s.replace("XC","LXXXX")
        s = s.replace("CD","CCCC")
        s = s.replace("CM","DCCCC")


        #We then convert each character into its digit equivalent
        #and sum those up
        for char in s:
            accumulated += translations[char]
        return accumulated
