"""
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.
"""

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        #sort list
        #iterate through list, for each element
        #create left pointer at i+1 and -1 (last element)
        #check if sum equals zero, if yes add to list of answers
        #if sum more than zero, move right pointer to the left
        #if sum less than zero move left pointer to the right
        #do it until left is right of right pointer
        #go to next element, but skip elements that are equal to their left neighbor (we need no duplicate)
        #when we find a triplet, update left pointer by incrementing until we find a different value

        ans = []

        nums.sort()

        #print(nums)
        
        for i, v in enumerate(nums): #iterate through index and value
            if i > 0 and v == nums[i-1]: #if left neighbour is same as current, skip it
                continue

            l, r = i+1, len(nums) -1
            while l < r:
                #print("l ", l)
                #print("r ", r)
                threeSum = v + nums[l] + nums[r]
                if threeSum > 0:
                    r -= 1
                elif threeSum < 0:
                    l += 1
                else:
                    ans.append([v, nums[l], nums[r]])
                    l += 1
                    while nums[l] == nums[l-1] and l < r: #update left pointer until the next value is different from its left neighbour
                        l += 1

        return ans
